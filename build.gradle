apply plugin: 'sonar-runner'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.2.1'
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'idea'
  apply plugin: 'coveralls'

  // jacoco configuration for coveralls
  jacocoTestReport {
    reports {
      xml.enabled = true // coveralls plugin depends on xml format report
      html.enabled = true
    }
  }

  sourceSets {
    integtest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir 'src/integtest/java'
      }
      resources {
        srcDir 'src/integtest/resources'
      }
    }
  }

  idea {
    module {
      testSourceDirs += file('src/integtest/java')
      testSourceDirs += file('src/integtest/resources')
    }
  }

  test {
      jacoco {
          append = true
          destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
      }
  }

  task "integtest"(type: Test, dependsOn: integtestClasses) {
    testClassesDir = sourceSets.integtest.output.classesDir
    classpath = sourceSets.integtest.runtimeClasspath

      jacoco {
          append = true
          destinationFile = file("$buildDir/jacoco/jacocoIntegTest.exec")
      }
  }

  configurations {
    integtestCompile.extendsFrom testCompile
  }

  tasks.withType(Test) {
    afterTest { descriptor, result ->
        logger.info("Executed test ${descriptor.getClassName().substring(descriptor.getClassName().lastIndexOf('.') + 1 )}.${descriptor.name} (${result.getEndTime() - result.getStartTime()}ms): ${result.getResultType()}")
    }

    testLogging {
        exceptionFormat "full"
    }
  }

    sonarRunner {
        sonarProperties {
            property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacocoTest.exec"
            property "sonar.jacoco.itReportPath", "$buildDir/jacoco/jacocoIntegTest.exec"
        }
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.projectName", "test-samples"
        property "sonar.projectKey", "jsebfranck.samples"
    }
}

